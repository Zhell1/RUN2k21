{"version":3,"sources":["App.js","PayDialog.js","logo.svg","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","App","useState","isOpenDialog","set_isOpenDialog","className","variant","color","open","handleClose","id","onClick","console","log","Presto","payment","create","key","description","outputs","to","satoshis","data","Buffer","from","mount","embed","style","on","pushTx","txid","pay","ResponsiveDialog","props","React","useTheme","fullScreen","useMediaQuery","breakpoints","down","onClose","fullWidth","aria-labelledby","keepMounted","children","autoFocus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMASMA,EAAYC,aAAW,SAACC,GAAD,MAAY,MA0D1BC,IAnCf,WACkBH,IAAhB,IAEA,EAAyCI,oBAAS,GAAlD,mBAAOC,EAAP,KAAqBC,EAArB,KAOA,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,yCAIA,cAAC,IAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAlC,2BAIA,eAAC,IAAD,CAAkBC,KAAML,EAAcM,YAhBjB,WACzBL,GAAiB,IAeb,UACE,qBAAKC,UAAU,kBAAkBK,GAAG,oBACpC,qBAAKA,GAAG,uBAGV,cAAC,IAAD,CAAQJ,QAAQ,YAAYC,MAAM,UAC1BI,QAAS,WAAMP,GAAiB,GA7ChD,WACEQ,QAAQC,IAAIC,KACZ,IAAMC,EAAUD,IAAOE,OAAO,CAC5BC,IAAK,uDACLC,YAAa,kBACbC,QAAS,CACP,CAAEC,GAAI,qCAAsCC,SAAU,KACtD,CAAEC,KAAM,CAACC,EAAOC,KAAK,qBAGzBZ,QAAQC,IAAIE,GAEZA,EACGU,MAAMC,YAAM,mBAAoB,CAAEC,MAAO,CAAC,UAAW,mBACrDC,GAAG,UAAU,SAAAb,GAAO,OAAIA,EAAQc,YAChCD,GAAG,WAAW,SAAAE,GAAI,OAAIlB,QAAQC,IAAI,UAAWiB,MA8BKC,IAD/C,yB,kLChDO,SAASC,EAAiBC,GAKvC,MAAwBC,IAAMhC,SAAS+B,EAAMzB,MAA7C,mBACMR,GADN,UACcmC,eACRC,EAAaC,YAAcrC,EAAMsC,YAAYC,KAAK,OAOxD,SAAS9B,IACJwB,EAAMxB,aAAawB,EAAMxB,cAI9B,OACE,8BAMA,eAAC,IAAD,CACI2B,WAAYA,EACZ5B,KAAMyB,EAAMzB,KACZgC,QAAS/B,EACTgC,WAAW,EACXC,kBAAgB,0BAChBC,aAAa,EANjB,UAQI,cAAC,IAAD,UACGV,EAAMW,WAET,cAAC,IAAD,UACE,cAAC,IAAD,CAAQjC,QAASF,EAAaF,MAAM,UAAUsC,WAAS,EAAvD,4B,6TChDK,K,+FCYAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxD,EAAA,EAAD,MAEFyD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4bc689aa.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Presto, embed} from 'paypresto.js'; \nimport ResponsiveDialog from \"./PayDialog\"\n\nimport './App.css';\nimport logo from './logo.svg';\n\nconst useStyles = makeStyles((theme) => ({\n\n}));\n\n\nfunction pay(){\n  console.log(Presto)\n  const payment = Presto.create({\n    key: 'Kx2p4o7FYJYjEwufdYJLXjPtu2vaSpQ8mB7mjMJnaHnPSrGQ1nQk',\n    description: 'My test payment',\n    outputs: [\n      { to: '1CBTGrChDDGsewF1eAV6FQyxRaSXRvUT7o', satoshis: 5000 }, // TODO replace with oracle address\n      { data: [Buffer.from(\"Hello world!\")] }\n    ]\n  })\n  console.log(payment)\n  \n  payment\n    .mount(embed('#payprestowidget', { style: ['rounded', 'border-thick'] }))\n    .on('funded', payment => payment.pushTx())\n    .on('success', txid => console.log('TX sent', txid))\n}\n\nfunction App() {\n  const classes = useStyles();\n\n  const [isOpenDialog, set_isOpenDialog] = useState(false)\n\n  const handleClosedDialog = () => {\n    set_isOpenDialog(false)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          Oracles\n        </h1>\n        \n        <Button variant=\"contained\" color=\"primary\">\n            Add My Oracle\n        </Button>\n        \n        <ResponsiveDialog open={isOpenDialog} handleClose={handleClosedDialog}>\n          <div className=\"payprestoWidget\" id=\"payprestoWidget\"></div>\n          <div id=\"payprestowidget\"></div>\n        </ResponsiveDialog>\n\n        <Button variant=\"contained\" color=\"primary\"\n                onClick={()=>{ set_isOpenDialog(true); pay() }}>\n          PAY\n        </Button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\nexport default function ResponsiveDialog(props) {\r\n    /**\r\n     *              open              boolean\r\n     * (optional)   handleClose       callback\r\n     */\r\n  const [open, setOpen] = React.useState(props.open) // false\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n /* function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n  */\r\n\r\n  function handleClose() {\r\n    if(props.handleClose) props.handleClose() // callback\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n    {/*}\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Open responsive dialog\r\n      </Button>\r\n    */}\r\n    <Dialog\r\n        fullScreen={fullScreen}\r\n        open={props.open}\r\n        onClose={handleClose}\r\n        fullWidth={true}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n        keepMounted={true} // keep mounted otherwise paypresto can't inject in it \r\n      >\r\n        <DialogContent>\r\n          {props.children}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}