{"version":3,"sources":["App.js","PayDialog.js","logo.svg","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","App","useState","isOpenDialog","set_isOpenDialog","className","variant","color","open","handleClose","id","onClick","console","log","Presto","payment","create","key","description","outputs","to","satoshis","data","Buffer","from","mount","embed","style","on","pushTx","txid","pay","ResponsiveDialog","props","React","useTheme","fullScreen","useMediaQuery","breakpoints","down","onClose","fullWidth","aria-labelledby","keepMounted","children","autoFocus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMASMA,EAAYC,aAAW,SAACC,GAAD,MAAY,MA0D1BC,IAnCf,WACkBH,IAAhB,IAEA,EAAyCI,oBAAS,GAAlD,mBAAOC,EAAP,KAAqBC,EAArB,KAOA,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,yCAIA,cAAC,IAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAlC,2BAIA,eAAC,IAAD,CAAkBC,KAAML,EAAcM,YAhBjB,WACzBL,GAAiB,IAeb,UACE,qBAAKC,UAAU,kBAAkBK,GAAG,oBACpC,qBAAKA,GAAG,uBAGV,cAAC,IAAD,CAAQJ,QAAQ,YAAYC,MAAM,UAC1BI,QAAS,WAAMP,GAAiB,GA7ChD,WACEQ,QAAQC,IAAIC,KACZ,IAAMC,EAAUD,IAAOE,OAAO,CAC5BC,IAAK,uDACLC,YAAa,kBACbC,QAAS,CACP,CAAEC,GAAI,qCAAsCC,SAAU,KACtD,CAAEC,KAAM,CAACC,EAAOC,KAAK,qBAGzBZ,QAAQC,IAAIE,GAEZA,EACGU,MAAMC,YAAM,mBAAoB,CAAEC,MAAO,CAAC,UAAW,mBACrDC,GAAG,UAAU,SAAAb,GAAO,OAAIA,EAAQc,YAChCD,GAAG,WAAW,SAAAE,GAAI,OAAIlB,QAAQC,IAAI,UAAWiB,MA8BKC,IAD/C,yB,kLChDO,SAASC,EAAiBC,GAKvC,MAAwBC,IAAMhC,SAAS+B,EAAMzB,MAA7C,mBACMR,GADN,UACcmC,eACRC,EAAaC,YAAcrC,EAAMsC,YAAYC,KAAK,OAOxD,SAAS9B,IACJwB,EAAMxB,aAAawB,EAAMxB,cAI9B,OACE,8BAMA,eAAC,IAAD,CACI2B,WAAYA,EACZ5B,KAAMyB,EAAMzB,KACZgC,QAAS/B,EACTgC,WAAW,EACXC,kBAAgB,0BAChBC,aAAa,EANjB,UAQI,cAAC,IAAD,UACGV,EAAMW,WAET,cAAC,IAAD,UACE,cAAC,IAAD,CAAQjC,QAASF,EAAaF,MAAM,UAAUsC,WAAS,EAAvD,4B,iVChDK,K,+FCYAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxD,EAAA,EAAD,MAEFyD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.96397a32.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Presto, embed} from 'paypresto.js'; \r\nimport ResponsiveDialog from \"./PayDialog\"\r\n\r\nimport './App.css';\r\nimport logo from './logo.svg';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n}));\r\n\r\n\r\nfunction pay(){\r\n  console.log(Presto)\r\n  const payment = Presto.create({\r\n    key: 'Kx2p4o7FYJYjEwufdYJLXjPtu2vaSpQ8mB7mjMJnaHnPSrGQ1nQk',\r\n    description: 'My test payment',\r\n    outputs: [\r\n      { to: '1CBTGrChDDGsewF1eAV6FQyxRaSXRvUT7o', satoshis: 5000 }, // TODO replace with oracle address\r\n      { data: [Buffer.from(\"Hello world!\")] }\r\n    ]\r\n  })\r\n  console.log(payment)\r\n  \r\n  payment\r\n    .mount(embed('#payprestowidget', { style: ['rounded', 'border-thick'] }))\r\n    .on('funded', payment => payment.pushTx())\r\n    .on('success', txid => console.log('TX sent', txid))\r\n}\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n\r\n  const [isOpenDialog, set_isOpenDialog] = useState(false)\r\n\r\n  const handleClosedDialog = () => {\r\n    set_isOpenDialog(false)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>\r\n          Oracles\r\n        </h1>\r\n        \r\n        <Button variant=\"contained\" color=\"primary\">\r\n            Add My Oracle\r\n        </Button>\r\n        \r\n        <ResponsiveDialog open={isOpenDialog} handleClose={handleClosedDialog}>\r\n          <div className=\"payprestoWidget\" id=\"payprestoWidget\"></div>\r\n          <div id=\"payprestowidget\"></div>\r\n        </ResponsiveDialog>\r\n\r\n        <Button variant=\"contained\" color=\"primary\"\r\n                onClick={()=>{ set_isOpenDialog(true); pay() }}>\r\n          PAY\r\n        </Button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\nexport default function ResponsiveDialog(props) {\r\n    /**\r\n     *              open              boolean\r\n     * (optional)   handleClose       callback\r\n     */\r\n  const [open, setOpen] = React.useState(props.open) // false\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n /* function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n  */\r\n\r\n  function handleClose() {\r\n    if(props.handleClose) props.handleClose() // callback\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n    {/*}\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Open responsive dialog\r\n      </Button>\r\n    */}\r\n    <Dialog\r\n        fullScreen={fullScreen}\r\n        open={props.open}\r\n        onClose={handleClose}\r\n        fullWidth={true}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n        keepMounted={true} // keep mounted otherwise paypresto can't inject in it \r\n      >\r\n        <DialogContent>\r\n          {props.children}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}